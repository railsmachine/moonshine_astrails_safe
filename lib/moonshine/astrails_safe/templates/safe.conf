safe do

  # backup file path (not including filename)
  # supported substitutions:
  #   :kind -> backup 'engine' kind, e.g. "mysqldump" or "archive"
  #   :id -> backup 'id', e.g. "blog", "production", etc.
  #   :timestamp -> current run timestamp (same for all the backups in the same 'run')
  # you can set separate :path for all backups (or once globally here)
  local do
    path '<%= options[:local][:path] || "/home/#{configuration[:user]}/backup/:kind" %>'
  end

  ## uncomment to enable uploads to Amazon S3
  ## Amazon S3 auth (optional)
  ## don't forget to add :s3 to the 'store' list
  # s3 do
  #   key YOUR_S3_KEY
  #   secret YOUR_S3_SECRET
  #   bucket S3_BUCKET
  #   # path for uploads to S3. supports same substitution like :local/:path
  #   path ":kind/" # this is default
  # end
  <% if options[:s3] %>
  s3 do
    key '<%= options[:s3][:key] %>'
    secret '<%= options[:s3][:secret] %>'
    bucket '<%= options[:s3][:bucket] || "backup_#{configuration[:application]}" %>'
    path '<%= options[:s3][:path] || ":kind/" %>'
  end
  <% end %>

  ## uncomment to enable GPG encryption.
  ## Note: you can use public 'key' or symmetric password but not both!
  # gpg do
  #   # key "backup@astrails.com"
  #   password "astrails"
  # end
  <% if options[:gpg] %>
  gpg do
    <% %w[password key options].each do |key| %>
    <%= "#{key} '#{options[:gpg][key.to_sym]}'" if options[:gpg][key.to_sym] %>
    <% end %>
  end
  <% end %>

  ## keep only given number of latest backups. remove the rest
  <% if options[:keep] %>
  keep do
    local <%= options[:keep][:local] || '3' %> # keep N local backups
    s3 <%= options[:keep][:s3] || '10' %> # keep M S3 backups
  end
  <% end %>

  # backup mysql databases with mysqldump
  <% if %w[mysql mysql2].include? database_environment[:adapter] %>
  mysqldump do
    # you can override any setting from parent in a child:
    options "-ceKq --single-transaction --create-options"

    user "<%= options[:mysql][:user] || 'root' %>"
    <% %w[password host port socket].each do |key| %>
      <%= "#{key} '#{options[:mysql][key.to_sym]}'" if options[:mysql][key.to_sym] %>
    <% end %>

    # database is a 'collection' element. it must have a hash or block parameter
    # it will be 'collected' in a 'databases', with database id (1st arg) used as hash key
    # the following code will create mysqldump/databases/blog and mysqldump/databases/mysql ocnfiguration 'nodes'

    # backup database from database.yml by default
    # provide an array of database names to backup others
    <% if options[:mysql][:databases] %>
      <% options[:mysql][:databases].to_a.each do |db| %>
    database "<%= db %>"
      <% end %>
    <% else %>
    database "<%= database_environment[:database] %>"
    <% end %>

    # backup overriding some values
    # database :production do
    #   # you can override 'partially'
    #   keep :local => 3
    #   # keep/local is 3, and keep/s3 is 20 (from parent)

    #   # local override for gpg password
    #   gpg do
    #     password "custom-production-pass"
    #   end

    #   skip_tables [:logger_exceptions, :request_logs] # skip those tables during backup
    # end

  end
  <% end %>

  <% unless options[:mongodb].empty? %>
  mongodump do

    <% if options[:mongodb][:host] %>
    host "<%= options[:mongodb][:host] %>"
    <% end %>
    
    <% if options[:mongodb][:databases] %>
      <% options[:mongodb][:databases].to_a.each do |db| %>
    database "<%= db %>"
      <% end %>
    <% else %>
    database "<%= configuration[:application] %>"
    <% end %>
  end
  <% end %>


  # # uncomment to enable
  # # backup PostgreSQL databases with pg_dump
  # pgdump do
  #   option "-i -x -O"
  #
  #   user "markmansour"
  #   # password "" - leave this out if you have ident setup
  #
  #   # database is a 'collection' element. it must have a hash or block parameter
  #   # it will be 'collected' in a 'databases', with database id (1st arg) used as hash key
  #   database :blog
  #   database :production
  # end

  <% unless options[:archives] == false %>
  tar do
    # 'archive' is a collection item, just like 'database'
    # archive "git-repositories" do
    #   # files and directories to backup
    #   files "/home/git/repositories"
    # end
    
    <% if options[:archives].is_a? Array %>
    
    <% options[:archives].each do |archive| %>
    archive '<%= archive[:name] %>' do
      files '<%= archive[:files] %>'
      <% if archive[:exclude] %>
      exclude [ <%= archive[:exclude].to_a.map{|p| "'#{p}'"}.join(',') %> ]
      <% end %>
    end
    <% end %>
    
    <% else %>
    
    archive '<%= configuration[:application] %>' do
      files '<%= configuration[:deploy_to] %>'
    end
    <% end %>

    # archive "etc-files" do
    #   files "/etc"
    #   # exlude those files/directories
    #   exclude "/etc/puppet/other"
    # end

    # archive "dot-configs" do
    #   files "/home/*/.[^.]*"
    # end

    # archive "blog" do
    #   files "/var/www/blog.astrails.com/"
    #   # specify multiple files/directories as array
    #   exclude ["/var/www/blog.astrails.com/log", "/var/www/blog.astrails.com/tmp"]
    # end

    # archive "site" do
    #   files "/var/www/astrails.com/"
    #   exclude ["/var/www/astrails.com/log", "/var/www/astrails.com/tmp"]
    # end

    # archive :misc do
    #   files [ "/backup/*.rb" ]
    # end
  end
  <% end %>

end
